const toBold = (text) => {
  const map = {
    A: "ùóî", B: "ùóï", C: "ùóñ", D: "ùóó", E: "ùóò", F: "ùóô", G: "ùóö", H: "ùóõ", I: "ùóú", J: "ùóù",
    K: "ùóû", L: "ùóü", M: "ùó†", N: "ùó°", O: "ùó¢", P: "ùó£", Q: "ùó§", R: "ùó•", S: "ùó¶", T: "ùóß",
    U: "ùó®", V: "ùó©", W: "ùó™", X: "ùó´", Y: "ùó¨", Z: "ùó≠",
    a: "ùóÆ", b: "ùóØ", c: "ùó∞", d: "ùó±", e: "ùó≤", f: "ùó≥", g: "ùó¥", h: "ùóµ", i: "ùó∂", j: "ùó∑",
    k: "ùó∏", l: "ùóπ", m: "ùó∫", n: "ùóª", o: "ùóº", p: "ùóΩ", q: "ùóæ", r: "ùóø", s: "ùòÄ", t: "ùòÅ",
    u: "ùòÇ", v: "ùòÉ", w: "ùòÑ", x: "ùòÖ", y: "ùòÜ", z: "ùòá"
  };
  return [...text].map(c => map[c] || c).join("");
};

const toSans = (text) => {
  const map = {
    a: "ùñ∫", b: "ùñª", c: "ùñº", d: "ùñΩ", e: "ùñæ", f: "ùñø", g: "ùóÄ", h: "ùóÅ", i: "ùóÇ", j: "ùóÉ",
    k: "ùóÑ", l: "ùóÖ", m: "ùóÜ", n: "ùóá", o: "ùóà", p: "ùóâ", q: "ùóä", r: "ùóã", s: "ùóå", t: "ùóç",
    u: "ùóé", v: "ùóè", w: "ùóê", x: "ùóë", y: "ùóí", z: "ùóì"
  };
  return [...text].map(c => map[c] || c).join("");
};

module.exports = {
  config: {
    name: "help",
    aliases: ["he"],
    version: "0.0.1",
    author: "ArYAN",
    description: "Show all commands or info about a specific one",
    category: "system",
    guide: "{pn}\n{pn} [command name]\n{pn} -[letter]"
  },

  onStart: async function ({ args, message }) {
    const commands = global.GoatBot.commands;
    const allCommands = Array.from(commands.values());

    if (args[0] && commands.has(args[0].toLowerCase())) {
      const cmd = commands.get(args[0].toLowerCase());
      const cfg = cmd.config;

      const guideText = typeof cfg.guide === "string"
        ? cfg.guide.replace(/{pn}/g, global.GoatBot.config.prefix + cfg.name).replace(/\n/g, "\n  ‚Ä¢ ")
        : `${global.GoatBot.config.prefix}${cfg.name}`;

      const replyMsg = 
        `üîç ${toBold("Command Info")}: *${toBold(cfg.name)}*\n\n` +
        `üìö ${toBold("Description")}:\n  ${toSans(cfg.description || "No description provided.")}\n\n` +
        `üõ†Ô∏è ${toBold("Usage")}:\n  ‚Ä¢ ${toSans(guideText)}\n\n` +
        `üìÇ ${toBold("Category")}: ${toSans(cfg.category || "Unknown")}\n` +
        `üë§ ${toBold("Author")}: ${toSans(cfg.author || "Unknown")}\n` +
        `üÜö ${toBold("Version")}: ${toSans(cfg.version || "1.0.0")}`;

      return message.reply(replyMsg);
    }

    if (args[0]?.startsWith("-") && args[0].length === 2) {
      const letter = args[0][1].toLowerCase();
      const filteredCommands = allCommands.filter(cmd => cmd.config.name.toLowerCase().startsWith(letter));

      if (filteredCommands.length === 0)
        return message.reply(`‚ùå ${toSans(`No commands start with '${letter.toUpperCase()}'`)}`);

      let msg = `üìñ ${toBold(`Commands with '${letter.toUpperCase()}'`)}:\n\n`;
      filteredCommands.forEach(cmd => {
        msg += `üìÅ ${toSans(cmd.config.name)}\n`;
      });

      return message.reply(msg.trim());
    }

    const categories = {};

    for (const cmd of allCommands) {
      const catRaw = cmd.config.category || "uncategorized";
      const cat = catRaw.charAt(0).toUpperCase() + catRaw.slice(1).toLowerCase();
      if (!categories[cat]) categories[cat] = [];
      categories[cat].push(cmd.config.name);
    }

    let fullMsg = "";
    for (const cat in categories) {
      fullMsg += `üìÅ ${toBold(cat)} ‚Äî ${toSans(categories[cat].length + " cmds")}\n`;
    }

    fullMsg += `\n${toSans("Type: help [command name] to get more info")}\n${toSans("Example: help ping")}\n`;
    fullMsg += `\n${toSans("Type: help -f tryp for available all commands")}`;

    return message.reply(fullMsg.trim());
  }
};
